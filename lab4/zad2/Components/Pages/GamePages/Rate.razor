@page "/Games/rate"
@inject zad2.Data.ApplicationDbContext DB
@using zad2.Data
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]

<PageTitle>Rate</PageTitle>

<h1>Rate</h1>

<h4>Game</h4>
<hr />
@if (Game is null) {
    <p><em>Loading...</em></p>
} else {
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Game" OnValidSubmit="UpdateGame" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Game.Id" value="@Game.Id" />
                <div class="mb-3">
                    <label for="rate" class="form-label">Rate:</label>
                    <InputNumber id="rate" @bind-Value="newRate" class="form-control" EnableMinMax="true" Min="0" Max="10" />
                    <ValidationMessage For="() => newRate" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/games">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    public Game? Game { get; set; }

    [SupplyParameterFromForm]
    public float newRate { get; set; }

    protected override async Task OnInitializedAsync() {
        Game ??= await DB.Game.FirstOrDefaultAsync(m => m.Id == Id);

        if (Game is null) {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateGame() {
        // DB.Attach(Game!).State = EntityState.Modified;

        // try {
        //     await DB.SaveChangesAsync();
        // } catch (DbUpdateConcurrencyException) {
        //     if (!GameExists(Game!.Id)) {
        //         NavigationManager.NavigateTo("notfound");
        //     } else {
        //         throw;
        //     }
        // }
        Game.NoRates = Game.NoRates + 1;
        Game.Rate = (Game.Rate * (Game.NoRates - 1) + newRate) / Game.NoRates;
        await DB.SaveChangesAsync();


        NavigationManager.NavigateTo("/games");
    }

    bool GameExists(int id) {
        return DB.Game.Any(e => e.Id == id);
    }
}
