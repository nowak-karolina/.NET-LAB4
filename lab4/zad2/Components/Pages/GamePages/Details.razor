@page "/games/details"
@inject zad2.Data.ApplicationDbContext DB
@using zad2.Data
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h4>Game</h4>
    <hr />
    @if (game is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10">@game.Title</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@game.Description</dd>
            <dt class="col-sm-2">Relese</dt>
            <dd class="col-sm-10">@game.Relese</dd>
            <dt class="col-sm-2">Rate</dt>
            <dd class="col-sm-10">@game.Rate</dd>
            <dt class="col-sm-2">Number of rates</dt>
            <dd class="col-sm-10">@game.NoRates</dd>
            <dt class="col-sm-2">Image</dt>
            <dd class="col-sm-10">
                @if (!string.IsNullOrEmpty(game.url)) {
                    <img src="@game.url" width="100%" alt="Game image" />
                } else {
                    <p>No image available</p>
                }
            </dd>
        </dl>
        <div>
            <a href="@($"/games/edit?id={game.Id}")">Edit</a> |
            <a href="@($"/games/rate?id={game.Id}")">Rate</a> |
            <a href="@($"/games")">Back to List</a>
        </div>
    }
</div>

@code {
    Game? game;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        game = await DB.Game.FirstOrDefaultAsync(m => m.Id == Id);

        if (game is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
